# ------------------------------------------------------------------------
# Conjunto de Regras Principais do ModSecurity OWASP ver. 4.0.0-rc1
# Direitos autorais (c) 2006-2020 Trustwave e colaboradores. Todos os direitos reservados.
# Direitos autorais (c) 2021-2022 Projeto do Conjunto de Regras Principais. Todos os direitos reservados.
#
# O Conjunto de Regras Principais do ModSecurity OWASP é distribuído sob
# Licença de Software Apache (ASL) versão 2
# Consulte o arquivo de LICENÇA anexado para obter detalhes completos.
# ------------------------------------------------------------------------


#
# -- [[ Introdução ]] --------------------------------------------------------
#
# O Conjunto de Regras Principais do ModSecurity OWASP (CRS) é um conjunto de regras de detecção de ataques genéricos
# que oferecem um nível básico de proteção para qualquer aplicação web. Essas regras foram escritas para o
# Firewall de Aplicação Web ModSecurity de código aberto e multiplataforma.
#
# Veja também:
# https://coreruleset.org/
# https://github.com/coreruleset/coreruleset
# https://owasp.org/www-project-modsecurity-core-rule-set/
#


#
# -- [[ Requisitos do Sistema ]] -------------------------------------------------
#
# O CRS requer a versão 2.8.0 ou superior do ModSecurity.
# Recomendamos sempre usar a versão mais recente do ModSecurity.
#
# As diretivas/configurações neste arquivo são usadas para controlar o
# CRS do ModSecurity. Essas configurações **NÃO** configuram as configurações principais do ModSecurity (modsecurity.conf)
# como SecRuleEngine, SecRequestBodyAccess, SecAuditEngine, SecDebugLog e processamento XML.
#
# O CRS assume que o modsecurity.conf foi carregado. Ele é fornecido com
# ModSecurity. Se você não o tiver, pode obtê-lo em:
# 2.x: https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v2/master/modsecurity.conf-recommended
# 3.x: https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
#
# A ordem de inclusão de arquivos na configuração do seu servidor web deve ser sempre:
# 1. modsecurity.conf
# 2. crs-setup.conf (este arquivo)
# 3. rules/*.conf (os arquivos de regras do CRS)
#
# Consulte o arquivo INSTALL para obter instruções detalhadas de instalação.
#


#
# -- [[ Modo de Operação: Pontuação de Anomalias vs. Autônomo ]] ---------------
#
# O CRS pode funcionar em dois modos:
#
# -- [[ Modo de Pontuação de Anomalias (padrão) ]] --
# No CRS3, o modo de anomalia é o padrão e recomendado, pois fornece as informações de registro mais precisas e oferece a maior
# flexibilidade na definição de políticas de bloqueio. Também é chamado de "modo de detecção colaborativa". Nesse modo, cada regra
# correspondente aumenta uma 'pontuação de anomalia'. Ao final das regras de entrada e novamente ao final das regras de saída,
# a pontuação de anomalia é verificada, e as regras de avaliação de bloqueio aplicam uma ação disruptiva, retornando, por padrão,
# um erro 403.
#
# -- [[ Modo Autônomo ]] --
# Nesse modo, as regras aplicam uma ação instantaneamente. Isso era o padrão do CRS2. Pode reduzir o uso de recursos, mas oferece
# menos flexibilidade na política de bloqueio e registros de auditoria menos informativos (apenas a primeira ameaça detectada é registrada).
# As regras herdam a ação disruptiva que você especificar (ou seja, deny, drop, etc.). A primeira regra que corresponder executará essa ação.
# Na maioria dos casos, isso interromperá a avaliação após a primeira regra ser correspondente, semelhante à maioria dos IDSs.
#
# -- [[ Controle de Registro de Alerta ]] --
# Na configuração do modo, você também deve ajustar as opções de registro desejadas. Existem três opções comuns para lidar com o registro.
# Por padrão, o CRS ativa o registro no log de erros do servidor web (ou Visualizador de Eventos) e um registro detalhado no log de auditoria do ModSecurity
# (configurado em SecAuditLog no modsecurity.conf).
#
# - Para registrar tanto no log de erros quanto no log de auditoria do ModSecurity, use: "log,auditlog"
# - Para registrar apenas no arquivo de log de auditoria do ModSecurity, use: "nolog,auditlog"
# - Para registrar apenas no arquivo de log de erros, use: "log,noauditlog"
#
# Os exemplos dos vários modos a seguir. Você deve deixar uma das opções ativadas.
# Observe que você deve especificar a mesma linha para fase:1 e fase:2.
#

# Padrão: Modo de Pontuação de Anomalias, registro no log de erros, registro no log de auditoria do ModSecurity
# - Por padrão, as solicitações ofensivas são bloqueadas com uma resposta de erro 403.
# - Para alterar a ação disruptiva, consulte RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example
#   e reveja a seção 'Alterando a Ação Disruptiva para o Modo de Anomalia'.
# - No Apache, você pode usar o ErrorDocument para mostrar uma página de erro amigável ou
#   realizar um redirecionamento: https://httpd.apache.org/docs/2.4/custom-error.html
#
SecDefaultAction "phase:1,log,auditlog,pass"
SecDefaultAction "phase:2,log,auditlog,pass"

# Exemplo: Modo de Pontuação de Anomalias, registro apenas no log de auditoria do ModSecurity
# - Por padrão, as solicitações ofensivas são bloqueadas com uma resposta de erro 403.
# - Para alterar a ação disruptiva, consulte RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example
#   e reveja a seção 'Alterando a Ação Disruptiva para o Modo de Anomalia'.
# - No Apache, você pode usar o ErrorDocument para mostrar uma página de erro amigável ou
#   realizar um redirecionamento: https://httpd.apache.org/docs/2.4/custom-error.html
#
# SecDefaultAction "phase:1,nolog,auditlog,pass"
# SecDefaultAction "phase:2,nolog,auditlog,pass"

# Exemplo: Modo Autônomo, retornar erro 403 ao bloquear
# - Nessa configuração, a ação disruptiva padrão se torna 'deny'. Após uma regra disparar,
#   ela interromperá o processamento da solicitação e retornará um erro 403.
# - Você também pode usar um status de erro diferente, como 404, 406, etc.
# - No Apache, você pode usar o ErrorDocument para mostrar uma página de erro amigável ou
#   realizar um redirecionamento: https://httpd.apache.org/docs/2.4/custom-error.html
#
# SecDefaultAction "phase:1,log,auditlog,deny,status:403"
# SecDefaultAction "phase:2,log,auditlog,deny,status:403"

# Exemplo: Modo Autônomo, redirecionar de volta para a página inicial ao bloquear
# - Nessa configuração, a ação 'tag' inclui os dados do cabeçalho Host no
#   log. Isso ajuda a identificar qual host virtual disparou a regra (se houver algum).
# - Observe que isso pode causar loops de redirecionamento em algumas situações; por exemplo,
#   se um cabeçalho Cookie ou User-Agent for bloqueado, ele também será bloqueado quando
#   o cliente tentar acessar a página inicial posteriormente. Você também pode redirecionar
#   para outra URL personalizada.
# SecDefaultAction "phase:1,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"
# SecDefaultAction "phase:2,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"


#
# -- [[ Inicialização do Nível de Paranoia ]] ---------------------------------------
#
# A configuração do Nível de Paranoia (PL) permite que você escolha o nível desejado
# de verificações de regras que serão adicionadas às suas pontuações de anomalia.
#
# Com o aumento de cada nível de paranoia, o CRS habilita regras adicionais
# fornecendo um nível mais alto de segurança. No entanto, níveis de paranoia mais
# altos também aumentam a possibilidade de bloquear algum tráfego legítimo devido a
# alarmes falsos (também chamados de falsos positivos ou FPs). Se você usar níveis
# de paranoia mais altos, é provável que você precise adicionar algumas regras de exclusão
# para certas solicitações e aplicativos que recebem entrada complexa.
#
# - Um nível de paranoia de 1 é o padrão. Neste nível, a maioria das regras principais
#   está habilitada. O PL1 é recomendado para iniciantes, instalações que
#   cobrem muitos sites e aplicativos diferentes e para configurações com requisitos de
#   segurança padrão.
#   No PL1, você deve encontrar FPs raramente. Se você encontrar FPs, por favor,
#   abra um problema no site do GitHub do CRS e não se esqueça de anexar seu
#   registro completo de log de auditoria para a solicitação com o problema.
# - O nível de paranoia 2 inclui muitas regras adicionais, como a habilitação
#   de muitas proteções de injeção SQL e XSS baseadas em expressões regulares, e
#   a adição de palavras-chave adicionais verificadas para injeções de código. O PL2 é
#   recomendado para usuários moderados a experientes que desejam uma cobertura mais completa
#   e para instalações com requisitos de segurança elevados.
#   O PL2 vem com alguns FPs que você precisa lidar.
# - O nível de paranoia 3 habilita mais regras e listas de palavras-chave e ajusta
#   limites em caracteres especiais usados. O PL3 é voltado para usuários experientes
#   na manipulação de FPs e instalações com um alto requisito de segurança.
# - O nível de paranoia 4 restringe ainda mais os caracteres especiais.
#   O nível mais alto é recomendado para usuários experientes que protegem
#   instalações com requisitos de segurança muito altos. Executar o PL4 provavelmente
#   produzirá um número muito alto de FPs que precisam ser tratados
#   antes que o site possa ser colocado em produção.
#
# Todas as regras registrarão seu PL no log de auditoria;
# exemplo: [tag "paranoia-level/2"]. Isso permite que você deduza a
# partir do log de auditoria como o comportamento do WAF é afetado pelo nível de paranoia.
#
# É importante também olhar para a variável
# tx.enforce_bodyproc_urlencoded (Aplicar Processador de Corpo URLENCODED)
# definida abaixo. Habilitá-lo fecha uma possível violação do CRS.
#
# Descomente esta regra para alterar o padrão:
#
#SecAction \
#    "id:900000,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.blocking_paranoia_level=1"


# É possível executar regras de um nível de paranoia mais alto, mas não incluí-las na pontuação de anomalia. Isso permite
# que você pegue um sistema bem ajustado no nível de paranoia 1 e adicione regras do nível de paranoia 2 sem temer que
# as novas regras levem a falsos positivos que aumentem sua pontuação acima do limite.
# Esse recurso opcional é habilitado descomentando a regra a seguir e
# configurando tx.detection_paranoia_level.
# Tecnicamente, as regras até o nível definido em tx.detection_paranoia_level
# serão executadas, mas apenas as regras até tx.blocking_paranoia_level afetam as
# pontuações de anomalia.
# Por padrão, tx.detection_paranoia_level é definido como tx.blocking_paranoia_level.
# tx.detection_paranoia_level não pode ser menor que tx.blocking_paranoia_level.
#
# Observe que configurar tx.detection_paranoia_level para um nível de paranoia mais alto
# resulta em um impacto no desempenho igual ao de configurar
# tx.blocking_paranoia_level para esse nível.
#
#SecAction \
#    "id:900001,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.detection_paranoia_level=1"


#
# -- [[ Aplicar Processador de Corpo URLENCODED ]] -----------------------------------
#
# O ModSecurity seleciona o processador de corpo com base no cabeçalho da solicitação Content-Type.
# No entanto, os clientes nem sempre definem o cabeçalho Content-Type para os payloads de seus corpos de solicitação.
# Isso deixa o ModSecurity com visão limitada sobre o payload. A variável tx.enforce_bodyproc_urlencoded permite que você
# force o processador de corpo URLENCODED nessas situações. Isso é desativado por padrão, pois
# implica uma mudança no comportamento do ModSecurity além do CRS (o processador de corpo se aplica a todas as regras, não apenas ao CRS)
# e porque pode levar a falsos positivos já no nível de paranoia 1. No entanto, habilitar essa variável fecha uma possível violação do CRS.
#
# Descomente esta regra para alterar o padrão:
#
#SecAction \
#    "id:900010,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.enforce_bodyproc_urlencoded=1"


#
# -- [[ Níveis de Severidade do Modo de Pontuação de Anomalias ]] --------------------------------
#
# Cada regra no CRS tem um nível de severidade associado.
# Esses são os pontos de pontuação padrão para cada nível de severidade.
# Essas configurações serão usadas para aumentar a pontuação de anomalia se uma regra corresponder.
# Você pode ajustar esses pontos a seu gosto, mas geralmente isso não é necessário.
# - Gravidade CRÍTICA: Pontuação de Anomalia de 5.
#       Principalmente gerada pelas regras de ataque de aplicativos (arquivos 93x e 94x).
# - Gravidade ERRO: Pontuação de Anomalia de 4.
#       Gerada principalmente a partir de regras de vazamento de saída (arquivos 95x).
# - Gravidade AVISO: Pontuação de Anomalia de 3.
#       Gerada principalmente pelas regras de clientes maliciosos (arquivos 91x).
# - Gravidade NOTA: Pontuação de Anomalia de 2.
#       Gerada principalmente pelas regras de protocolo (arquivos 92x).
#
# No modo de anomalia, essas pontuações são cumulativas.
# Portanto, é possível que uma solicitação acione várias regras.
#
# (Observação: Neste arquivo, usamos 'phase:1' para definir variáveis de configuração do CRS.
# Em geral, é usado 'phase:requisição'. No entanto, queremos ter absoluta certeza
# de que todas as variáveis de configuração são definidas antes que as regras do CRS sejam processadas.)
#
#SecAction \
#    "id:900100,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.critical_anomaly_score=5,\
#    setvar:tx.error_anomaly_score=4,\
#    setvar:tx.warning_anomaly_score=3,\
#    setvar:tx.notice_anomaly_score=2"


#
# -- [[ Níveis de Limiar de Bloqueio no Modo de Pontuação de Anomalias ]] ----------------------
#
# Aqui, você pode especificar em que pontuação cumulativa de anomalia uma solicitação de entrada
# ou uma resposta de saída é bloqueada.
#
# A maioria das ameaças de entrada detectadas dará uma pontuação crítica de 5.
# Violações menores, como violações de protocolo/standards, carregam pontuações mais baixas.
#
# [No valor padrão]
# Se você mantiver os limiares de bloqueio nos valores padrão, o CRS funcionará
# de maneira semelhante às versões anteriores do CRS: uma única correspondência de regra crítica causará
# que a solicitação seja bloqueada e registrada.
#
# [Usando valores mais altos]
# Se você deseja tornar o CRS menos sensível, pode aumentar os limiares de bloqueio,
# por exemplo, para 7 (o que exigiria várias correspondências de regra antes do bloqueio) ou 10 (o que exigiria pelo menos dois alertas críticos - ou
# uma combinação de muitos alertas menores), ou ainda mais alto. No entanto, aumentar os
# limiares pode fazer com que alguns ataques escapem das regras do CRS ou de suas políticas.
#
# [Nova estratégia de implantação: Começando alto e diminuindo]
# É uma prática comum iniciar uma nova instalação do CRS com limiares de pontuação de anomalia elevados (>100) e, em seguida,
# diminuir os limites à medida que sua confiança na configuração cresce. Você também pode examinar a
# seção "Porcentagem de Amostragem" abaixo para uma estratégia diferente para iniciar uma nova
# instalação do CRS.
#
# [Quadrante de Limiar de Anomalia / Paranoia]
#
#     Limite de Anomalia Alto   |   Limite de Anomalia Alto
#     Baixo Nível de Paranoia   |   Alto Nível de Paranoia
#     -> Site Inicial           |   -> Site Experimental
# ------------------------------------------------------
#     Limite de Anomalia Baixo  |   Limite de Anomalia Baixo
#     Baixo Nível de Paranoia   |   Alto Nível de Paranoia
#     -> Site Padrão            |   -> Site de Alta Segurança
#
# Descomente esta regra para alterar os padrões:
#
#SecAction \
#    "id:900110,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.inbound_anomaly_score_threshold=5,\
#    setvar:tx.outbound_anomaly_score_threshold=4"
#
#
#
# -- [[ Exclusões de Regras Específicas de Aplicativos ]] --------------------------------
#
# O CRS 3.x continha pacotes de exclusão para ajustar o CRS para uso com aplicativos web comuns,
# reduzindo o número de falsos positivos.
#
# No CRS 4, eles não fazem mais parte do próprio CRS, mas estão disponíveis como "plugins do CRS". Alguns
# plugins melhoram o suporte para aplicativos da web, e outros podem trazer novas funcionalidades. Os plugins não são instalados por padrão, mas podem ser
# baixados no registro de plugins:
# https://github.com/coreruleset/plugin-registry
#
# Para obter informações detalhadas sobre o uso e a instalação de plugins, consulte:
# https://coreruleset.org/docs/concepts/plugins/


#
# -- [[ Nível de Relatório de Pontuação de Anomalia ]] ---------------------------------------
#
# Quando uma solicitação é bloqueada devido ao encontro ou à superação da
# pontuação de anomalia no limiar de anomalia, a regra de bloqueio também relatará a pontuação de anomalia.
# Isso se aplica às pontuações de anomalia de entrada e saída separadas.
#
# Na fase 5, existem regras adicionais que podem realizar relatórios adicionais
# de pontuações de anomalia com uma verbosidade que depende do nível de relatório definido
# abaixo.
#
# Ao definir o nível de relatório, você controla se deseja ou não relatórios adicionais
# além da regra de bloqueio e, se sim, quais solicitações devem ser cobertas. Quanto maior o nível de relatório, mais verboso será o relatório.
#
# Existem 6 níveis de relatório:
#
# 0 - Relatório desativado
# 1 - Relatório para solicitações com uma pontuação de anomalia de bloqueio >= a um limiar
# 2 - Relatório para solicitações com uma pontuação de anomalia de detecção >= a um limiar
# 3 - Relatório para solicitações com uma pontuação de anomalia de bloqueio maior que 0
# 4 - Relatório para solicitações com uma pontuação de anomalia de detecção maior que 0
# 5 - Relatório para todas as solicitações
#
# Observação: Os níveis de relatório 1 e 2 tornam possível diferenciar entre
# solicitações que são bloqueadas e solicitações que *não* são bloqueadas, mas teriam sido
# bloqueadas se a PL de bloqueio fosse igual à PL de detecção. Isso pode ser útil para certas metodologias de ajuste FP, por exemplo, mudar para um PL mais alto.
#
# Um valor de 5 pode ser útil em plataformas onde você deseja registrar
# solicitações sem pontuação, mas não é possível relatar essas informações em
# o log de solicitação/acesso. Isso se aplica ao Nginx, por exemplo.
#
#SecAction \
#    "id:900115,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.reporting_level=4"


#
# -- [[ Bloqueio Antecipado no Modo de Pontuação de Anomalias ]] ------------------------------
#
# As pontuações de anomalia para a solicitação e as respostas geralmente são somadas
# e avaliadas no final de fase:2 e no final de fase:4, respectivamente.
# No entanto, é possível ativar uma avaliação antecipada dessas pontuações de anomalia
# no final de fase:1 e no final de fase:3.
#
# Se uma solicitação (ou uma resposta) atingir o limiar de anomalia nesta avaliação antecipada,
# então o bloqueio acontece imediatamente (se o bloqueio estiver habilitado) e
# a fase 2 (e a fase 4, respectivamente) não será mais executada.
#
# Ative a regra 900120 que define a variável tx.early_blocking como 1 para
# ativar o bloqueio antecipado. A variável tx.early_blocking é definida como 0 por
# padrão. O bloqueio antecipado, portanto, está desativado por padrão.
#
# Observe que o bloqueio antecipado ocultará alertas potenciais para você. Isso
# significa que uma carga que apareceria em um alerta na fase 2 (ou na fase 4)
# não será avaliada se a solicitação for bloqueada antecipadamente. Portanto, quando você
# desativar o bloqueio antecipado novamente em algum momento no futuro, novos alertas
# da fase 2 podem aparecer.
#SecAction \
#    "id:900120,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.early_blocking=1"


#
# -- [[ Inicializar Coleções Padrão ]] ------------------------------
#
# O CRS fornece uma opção centralizada para inicializar e preencher coleções
# destinadas a serem usadas por plugins (por exemplo, plugin de proteção DoS).
# Por padrão, as coleções Global e IP (consulte a regra 901320),
# que não são usadas por regras principais, não são inicializadas.
#
# Descomente esta regra para alterar os padrões:
#
#SecAction \
#    "id:900130,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.enable_default_collections=1"


#
# -- [[ Configurações de Política HTTP ]] ------------------------------
#
# Esta seção define suas políticas para o protocolo HTTP, como:
# - versões HTTP permitidas, métodos HTTP permitidos, tipos de conteúdo de solicitação permitidos
# - extensões de arquivo proibidas (por exemplo, .bak, .sql) e cabeçalhos de solicitação proibidos (por exemplo, Proxy)
#
# Essas variáveis são usadas nos seguintes arquivos de regras:
# - REQUEST-911-METHOD-ENFORCEMENT.conf
# - REQUEST-920-PROTOCOL-ENFORCEMENT.conf

# Métodos HTTP que um cliente tem permissão para usar.
# Padrão: GET HEAD POST OPTIONS
# Exemplo: para APIs RESTful, adicione os seguintes métodos: PUT PATCH DELETE
# Exemplo: para WebDAV, adicione os seguintes métodos: CHECKOUT COPY DELETE LOCK
#          MERGE MKACTIVITY MKCOL MOVE PROPFIND PROPPATCH PUT UNLOCK
# Descomente esta regra para alterar os padrões.
#SecAction \
#    "id:900200,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.allowed_methods=GET HEAD POST OPTIONS'"

# Tipos de Conteúdo que um cliente tem permissão para enviar em uma solicitação.
# Padrão: |application/x-www-form-urlencoded| |multipart/form-data| |multipart/related|
# |text/xml| |application/xml| |application/soap+xml| |application/json|
# |application/cloudevents+json| |application/cloudevents-batch+json|
#
# Observe que a regra onde o CRS usa essa variável (920420) a avalia com o operador
# `@within`, que é sensível a maiúsculas e minúsculas, mas usa t:lowercase. Você deve adicionar
# seu tipo de conteúdo personalizado inteiro em minúsculas.
#
# Aviso de isenção: alguns aplicativos podem não depender do cabeçalho de solicitação de tipo de conteúdo para analisar o corpo da solicitação. Isso poderia permitir que um invasor enviasse
# cargas maliciosas URLENCODED/JSON/XML sem serem detectadas pelo WAF. Permitir tipo de conteúdo de solicitação que não ativa nenhum
# processador de corpo (por exemplo: "text/plain", "application/x-amf", "application/octet-stream", etc.) pode levar a uma evasão do WAF. Por exemplo, uma carga JSON maliciosa enviada com um tipo de conteúdo "text/plain"
# pode ainda ser interpretada como JSON por um aplicativo back-end, mas não acionaria o analisador de corpo JSON no WAF, levando a uma evasão.
#
# Para impedir o bloqueio de solicitação com tipo de conteúdo não permitido por padrão, você pode criar uma regra de exclusão
# que remove a regra 920420. Por exemplo:
#SecRule REQUEST_HEADERS:Content-Type "@rx ^text/plain" \
#    "id:1234,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    ctl:ruleRemoveById=920420,\
#    chain"
#    SecRule REQUEST_URI "@rx ^/foo/bar" \
#        "t:none"
#
# Descomente esta regra para alterar os padrões.
#

#SecAction \
#    "id:900220,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.allowed_request_content_type=|application/x-www-form-urlencoded| |multipart/form-data| |multipart/related| |text/xml| |application/xml| |application/soap+xml| |application/json| |application/cloudevents+json| |application/cloudevents-batch+json|'"

# Versões HTTP permitidas.
# Padrão: HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0 HTTP/3 HTTP/3.0
# Exemplo para clientes legados: HTTP/0.9 HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0 HTTP/3 HTTP/3.0
# Observe que algumas versões de servidores da web usam 'HTTP/2' e outras 'HTTP/2.0', então
# incluímos ambas as cadeias de versão por padrão.
# Descomente esta regra para alterar o padrão.
#SecAction \
#    "id:900230,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0 HTTP/3 HTTP/3.0'"

# Extensões de arquivo proibidas.
# Protege contra a exposição não intencional de arquivos de desenvolvimento/configuração.
# Padrão: .asa/ .asax/ .ascx/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .rdb/ .resources/ .resx/ .sql/ .swp/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/
# Exemplo: .bak/ .config/ .conf/ .db/ .ini/ .log/ .old/ .pass/ .pdb/ .rdb/ .sql/
# Observe que .axd foi removido devido a falsos positivos (consulte PR 1925).
#
# Para proteger também contra arquivos de configuração/arquivo de instalação de
# serem acidentalmente expostos, as extensões de arquivos de arquivo comuns podem ser adicionadas à
# lista de extensões restritas. Uma lista de extensões comuns de arquivos de arquivo
# é apresentada abaixo:
# .7z/ .br/ .bz/ .bz2/ .cab/ .cpio/ .gz/ .img/ .iso/ .jar/ .rar/ .tar/ .tbz2/ .tgz/ .txz/ .xz/ .zip/ .zst/
# (Fonte: https://en.wikipedia.org/wiki/List_of_archive_formats)
#
# Descomente esta regra para alterar o padrão.
#SecAction \
#    "id:900240,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .rdb/ .resources/ .resx/ .sql/ .swp/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/'"

# Cabeçalhos de solicitação proibidos.
# Os cabeçalhos de solicitação HTTP que o CRS restringe são divididos em duas categorias:
# básico (sempre proibido) e estendido (pode ser proibido). Todos os nomes de cabeçalho
# devem estar em minúsculas e cercados por /barras/ como delimitadores.
#
# [ Básico ]
# Inclui cabeçalhos obsoletos e cabeçalhos com riscos de segurança conhecidos. Sempre
# proibidos.
# Padrão: /content-encoding/ /proxy/ /lock-token/ /content-range/ /if/ /x-http-method-override/ /x-http-method/ /x-method-override/
#
# /content-encoding/
#   Usado para listar as codificações que foram aplicadas à carga útil original.
#   Usado apenas para compactação, o que não é suportado pelo CRS por padrão, uma vez que o CRS
#   bloqueia quebras de linha e bytes nulos dentro do corpo da solicitação. A maioria das compactações
#   algoritmos requerem pelo menos bytes nulos, conforme o RFC. Bloquear Content-Encoding
#   não deve causar problemas e aumenta a segurança, já que os mecanismos WAF, incluindo
#   o ModSecurity, geralmente são incapazes de verificar corretamente corpos de solicitação compactados.
#
# /proxy/
#   Bloquear isso impede a vulnerabilidade 'httpoxy': https://httpoxy.org
#
# /lock-token/
#
# /content-range/
#
# /if/
#
# /x-http-method-override/
# /x-http-method/
# /x-method-override/
#   Bloquear esses cabeçalhos impede ataques de sobreposição de método, como descrito aqui:
#   https://www.sidechannel.blog/en/http-method-override-what-it-is-and-how-a-pentester-can-use-it
#
# Descomente esta regra para alterar o padrão.
#SecAction \
#    "id:900250,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.restricted_headers_basic=/content-encoding/ /proxy/ /lock-token/ /content-range/ /if/ /x-http-method-override/ /x-http-method/ /x-method-override/'"
#
# [ Estendido ]
# Inclui cabeçalhos obsoletos que ainda estão em uso (portanto, falsos positivos são
# possíveis) e cabeçalhos com possíveis riscos de segurança. Proibido em um nível de paranoia maior.
# Padrão: /accept-charset/
#
# /accept-charset/
#   Cabeçalho obsoleto que não deve ser usado por clientes e deve ser ignorado
#   por servidores. Pode ser usado para ignorar um WAF de resposta solicitando um conjunto de caracteres
#   que o WAF não pode decodificar. Considerado um bom indicador de comportamento suspeito, mas produz muitos falsos positivos para ser proibido por padrão.
#   Referências:
#   https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset
#   https://github.com/coreruleset/coreruleset/issues/3140
#
# Descomente esta regra para alterar o padrão.
#SecAction \
#    "id:900255,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.restricted_headers_extended=/accept-charset/'"

# Tipos de conteúdo que um cliente tem permissão para enviar em uma solicitação.
# Os tipos de conteúdo são cercados por |pipes| como delimitadores para garantir correspondências exatas.
# Padrão: |utf-8| |iso-8859-1| |iso-8859-15| |windows-1252|
# Descomente esta regra para alterar o padrão.
#SecAction \
#    "id:900280,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:'tx.allowed_request_content_type_charset=|utf-8| |iso-8859-1| |iso-8859-15| |windows-1252|'"

#
# -- [[ Limites de Argumentos/Upload HTTP ]] -----------------------------------------
#
# Aqui você pode definir limites opcionais para parâmetros HTTP de get/post e uploads.
# Isso pode ajudar a prevenir ataques de DoS específicos da aplicação.
# Esses valores são verificados em REQUEST-920-PROTOCOL-ENFORCEMENT.conf.
# Cuidado com o bloqueio de tráfego legítimo ao habilitar esses limites.
#
# Bloquear solicitação se o número de argumentos for muito alto
# Padrão: ilimitado
# Exemplo: 255
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900300,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.max_num_args=255"

# Bloquear solicitação se o comprimento do nome de qualquer argumento for muito alto
# Padrão: ilimitado
# Exemplo: 100
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900310,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.arg_name_length=100"

# Bloquear solicitação se o comprimento do valor de qualquer argumento for muito alto
# Padrão: ilimitado
# Exemplo: 400
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900320,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.arg_length=400"

# Bloquear solicitação se o comprimento total de todos os argumentos combinados for muito alto
# Padrão: ilimitado
# Exemplo: 64000
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900330,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.total_arg_length=64000"

# Bloquear solicitação se o tamanho do arquivo individual enviado for muito alto
# Padrão: ilimitado
# Exemplo: 1048576
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900340,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.max_file_size=1048576"

# Bloquear solicitação se o tamanho total de todos os arquivos enviados combinados for muito alto
# Padrão: ilimitado
# Exemplo: 1048576
# Descomente esta regra para definir um limite.
#SecAction \
#    "id:900350,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.combined_file_sizes=1048576"
#
# -- [[ Facilitação / Percentagem de Amostragem ]] -------------------------------------
#
# Adicionar o Core Rule Set a um site produtivo existente pode levar a falsos positivos, problemas de desempenho inesperados e outros efeitos colaterais indesejados.
#
# Pode ser benéfico testar a água primeiro, ativando o CRS apenas para um
# número limitado de solicitações e, em seguida, quando você tiver resolvido os problemas (se houver)
# e tiver confiança na configuração, aumentar a proporção de solicitações
# sendo encaminhadas para o conjunto de regras.
#
# Ajuste a porcentagem de solicitações que são direcionadas para o Core Rules definindo
# TX.sampling_percentage abaixo. O padrão é 100, o que significa que todas as
# solicitações são verificadas pelo CRS. A seleção de solicitações que devem ser verificadas é baseada em um número pseudoaleatório gerado pelo ModSecurity.
#
# Se uma solicitação for permitida a passar sem ser verificada pelo CRS, não haverá entrada no log de auditoria (por razões de desempenho), mas uma entrada de log de erro será gravada.
# Se você deseja desativar a entrada no log de erro, emita a
# seguinte diretiva em algum lugar após a inclusão dos arquivos CRS
# (por exemplo, RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf).
#
#SecRuleUpdateActionById 901450 "nolog"
#
# ATENÇÃO: Se este TX.sampling_percentage estiver abaixo de 100, algumas das
# solicitações serão totalmente ignoradas pelo Core Rules e você perde a capacidade de
# proteger seu serviço com o ModSecurity.
#
# Descomente esta regra para habilitar esse recurso:
#
#SecAction \
#    "id:900400,\
#    phase:1,\
#    pass,\
#    nolog,\
#    setvar:tx.sampling_percentage=100"



#
# -- [[ Verificar codificação UTF-8 ]] ------------------------------------------------
#
# O CRS pode verificar opcionalmente o conteúdo da solicitação para codificação UTF-8 inválida.
# Queremos aplicar essa verificação apenas se a codificação UTF-8 for realmente usada pelo
# site; caso contrário, resultará em falsos positivos.
#
# Descomente esta regra para usar esse recurso:
#
#SecAction \
#    "id:900950,\
#    phase:1,\
#    pass,\
#    t:none,\
#    nolog,\
#    setvar:tx.crs_validate_utf8_encoding=1"


#
# -- [[ Tempo limite de coleta ]] --------------------------------------------------
#
# Defina a diretiva SecCollectionTimeout do padrão do ModSecurity (1 hora)
# para uma configuração mais baixa que seja apropriada para a maioria dos sites.
# Isso aumenta o desempenho, limpando entradas de coleção obsoletas (bloqueio).
#
# Esse valor deve ser maior ou igual a quaisquer durações de bloqueio ou tempos limite
# definidos por plugins que façam uso de coleções persistentes do ModSecurity (por exemplo, o
# plugins de proteção contra DoS e reputação de IP).
#
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)#SecCollectionTimeout

# Mantenha esta diretiva descomentada.
# Padrão: 600 (10 minutos)
SecCollectionTimeout 600


#
# -- [[ Fim da configuração ]] --------------------------------------------------------
#
# O CRS verifica a variável tx.crs_setup_version para garantir que a configuração
# tenha sido carregada. Se você não planeja usar este modelo de configuração,
# você deve definir manualmente a variável tx.crs_setup_version antes de incluir
# os arquivos de regras CRS/*
#
# A variável é uma representação numérica do número da versão do CRS.
# Por exemplo, v3.0.0 é representado como 300.
#
SecAction \
    "id:900990,\
    phase:1,\
    pass,\
    t:none,\
    nolog,\
    setvar:tx.crs_setup_version=400"

